name: Build Modded WPILibPi
on:
  push:
    paths-ignore:
      - '.github/workflows/**'
  workflow_dispatch:
  
jobs:
  mod-build:
    runs-on: ubuntu-latest
    steps:
      - run: echo '::echo::on'
      
      - run: df -h
      - run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
      - run: df -h

      - id: last-version
        run: echo "::set-output name=ver::$(curl -s https://raw.githubusercontent.com/S1ink/WPILibPi-Mod-Build/main/.github/workflows/sync.yml | grep 'LAST_VERSION:.*' | tr -s ' ' | cut -d ' ' -f3)"
      - id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - run: |
          echo ${{ steps.last-version.outputs.ver }}
          echo ${{ steps.date.outputs.date }}

      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: ${{ steps.last-version.output.ver }}
      - run: git fetch --prune --unshallow
        
      - name: Get OpenCV Version
        id: opencv-tag
        run: echo "::set-output name=tag::$(grep 'https://github.com/opencv/opencv/archive/.*' stage3/01-sys-tweaks/01-run.sh | cut -d '/' -f7 | cut -d '.' -f1-3)"
        
      - run: sed -i -e 's!^.*https://github.com/opencv/opencv/archive/${{ steps.opencv-tag.outputs.tag }}.tar.gz!&\nwget -nc -nv -O opencv-contrib.tar.gz https://github.com/opencv/opencv_contrib/archive/${{ steps.opencv-tag.outputs.tag }}.tar.gz!' stage3/01-sys-tweaks/01-run.sh
      - run: sed -i -e 's!tar xzf "${DOWNLOAD_DIR}/${{ steps.opencv-tag.outputs.tag }}.tar.gz"!&\ntar xzf "${DOWNLOAD_DIR}/opencv-contrib.tar.gz"!' stage3/01-sys-tweaks/01-run.sh
      - run: sed -i -e 's!^.*cmake "${EXTRACT_DIR}/opencv-${{ steps.opencv-tag.outputs.tag }}".*.*!&\n\t-DOPENCV_EXTRA_MODULES_PATH=${EXTRACT_DIR}/opencv_contrib-${{ steps.opencv-tag.outputs.tag }}/modules/aruco \\!' stage3/01-sys-tweaks/01-run.sh
      - run: cat stage3/01-sys-tweaks/01-run.sh
      
      - name: Docker Build
        run: |
          ls -l
          sudo apt-get install binfmt-support
          sudo modprobe binfmt_misc
          ./build-docker.sh
          
      - name: Package C++ Deps
        run: |
          sudo apt-get install {zip,unzip}
          mkdir {cpp-deps,cpp-deps-extract}
          unzip deploy/examples/cpp-multiCameraServer.zip -d cpp-deps-extract
          cp -R cpp-deps-extract/cpp-multiCameraServer/{lib,include} cpp-deps
          zip -r cpp-deps.zip cpp-deps
          mv cpp-deps.zip deploy
        
      - name: Upload Images
        uses: actions/upload-artifact@main
        with:
          name: Build
          path: deploy/
        
#always push artifacts to 'latest', push to VERSION if on sync
      - name: Update Latest
        uses: ncipollo/release-action@main
        with:
          artifacts: deploy/*.zip,deploy/examples/*.zip
          allowUpdates: true
          body: |
            Build Date: ${{ steps.date.outputs.date }}
            WPILibPi Version: ${{ steps.last-version.outputs.ver }}
            OpenCV Version: ${{ steps.opencv-tag.outputs.tag }}
          commit: main
          prerelease: false
          tag: Latest-Deps
          
      - name: Update Version
        uses: ncipollo/release-action@main
        with:
          artifacts: deploy/*.zip,deploy/examples/*.zip
          body: |
            Last Modified: ${{ steps.date.outputs.date }}
          tag: ${{ steps.last-version.outputs.ver }}
          
          
          
        
      
