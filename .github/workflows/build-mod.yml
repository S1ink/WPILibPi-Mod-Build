name: Build Modded WPILibPi
on:
  push:
    paths-ignore:
      - '.github/workflows/**'
  workflow_dispatch:
  
jobs:
  mod-build:
    runs-on: ubuntu-22.04
    steps:
      - run: echo '::echo::on'

      - name: Cleanup Env
        run: |
          echo "Freeing up space..."
          echo '********************** Before **********************'
          df -h
          echo '****************************************************'
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          docker rmi $(docker image ls -aq)
          echo '********************** After **********************'
          df -h
          echo '***************************************************'

      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Gather Parameters
        id: parameters
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "source-ref=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          echo "source-commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "opencv-tag=$(grep 'https://github.com/opencv/opencv/archive/.*' stage3/01-sys-tweaks/01-run.sh | cut -d '/' -f7 | cut -d '.' -f1-3)" >> $GITHUB_OUTPUT
          echo "wpilib-ver=$(grep 'https://github.com/wpilibsuite/allwpilib/archive/.*' stage3/01-sys-tweaks/01-run.sh | cut -d '/' -f7 | cut -d '.' -f1-3)" >> $GITHUB_OUTPUT

      - name: Validate Parameters
        run: |
          echo "Date: ${{ steps.parameters.outputs.date }}"
          echo "Tag: ${{ steps.parameters.outputs.source-ref }}"
          echo "Commit: ${{ steps.parameters.outputs.source-commit }}"
          echo "WPILib Version: ${{ steps.parameters.outputs.wpilib-ver }}"
          echo "OpenCV Version: ${{ steps.parameters.outputs.opencv-tag }}"

      - name: Add OpenCV Contrib
        run: |
          sed -i -e 's!^.*https://github.com/opencv/opencv/archive/${{ steps.parameters.outputs.opencv-tag }}.tar.gz!&\nwget -nc -nv -O opencv-contrib.tar.gz https://github.com/opencv/opencv_contrib/archive/${{ steps.parameters.outputs.opencv-tag }}.tar.gz!' stage3/01-sys-tweaks/01-run.sh
          sed -i -e 's!tar xzf "${DOWNLOAD_DIR}/${{ steps.parameters.outputs.opencv-tag }}.tar.gz"!&\ntar xzf "${DOWNLOAD_DIR}/opencv-contrib.tar.gz"!' stage3/01-sys-tweaks/01-run.sh
          sed -i -e 's!^.*cmake "${EXTRACT_DIR}/opencv-${{ steps.parameters.outputs.opencv-tag }}".*.*!&\n\t-DOPENCV_EXTRA_MODULES_PATH=${EXTRACT_DIR}/opencv_contrib-${{ steps.parameters.outputs.opencv-tag }}/modules/aruco \\!' stage3/01-sys-tweaks/01-run.sh
      
      - name: Prepare Deps
        run: |
          sudo apt-get update
          sudo apt-get --no-install-recommends --no-install-suggests install -y binfmt-support qemu-user-static qemu-utils nbd-server nbd-client
          sudo modprobe -a binfmt_misc nbd
          grep binfmt /proc/mounts

      - name: Docker Build
        run: ./build-docker.sh
          
      - name: Package C++ Deps
        run: |
          sudo apt-get install {zip,unzip}
          mkdir {cpp-deps,cpp-deps-extract}
          unzip deploy/examples/cpp-multiCameraServer.zip -d cpp-deps-extract
          cp -R cpp-deps-extract/cpp-multiCameraServer/{lib,include} cpp-deps
          zip -r cpp-deps.zip cpp-deps
          mv cpp-deps.zip deploy
        
      - name: Upload Images
        uses: actions/upload-artifact@main
        with:
          name: Build
          path: deploy/
        
#always push artifacts to 'latest', push to VERSION if on sync
      - name: Update Latest
        uses: ncipollo/release-action@main
        with:
          prerelease: false
          allowUpdates: true
          tag: Latest-Deps
          commit: ${{ steps.parameters.outputs.source-commit }}
          artifacts: deploy/*.zip,deploy/examples/*.zip
          body: |
            Build Date: ${{ steps.parameters.outputs.date }}
            WPILib Version: ${{ steps.parameters.outputs.wpilib-ver }}
            OpenCV Version: ${{ steps.parameters.outputs.opencv-tag }}
          
      - name: Update Version
        uses: ncipollo/release-action@main
        with:
          prerelease: false
          allowUpdates: true
          tag: ${{ steps.parameters.outputs.source-ref }}
          commit: ${{ steps.parameters.outputs.source-commit }}
          artifacts: deploy/*.zip,deploy/examples/*.zip
          body: |
            Last Modified: ${{ steps.parameters.outputs.date }}